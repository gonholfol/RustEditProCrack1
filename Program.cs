using System;
using System.IO;
using RustEditProCrack.Core;

namespace RustEditProCrack
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("üöÄ RustEdit Pro Crack - –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π DLL –ü–∞—Ç—á–µ—Ä");
            Console.WriteLine("================================================");

            if (args.Length == 0)
            {
                ShowUsage();
                return;
            }

            string dllPath = args[0];
            
            if (string.IsNullOrEmpty(dllPath))
            {
                Console.WriteLine("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ DLL —Ñ–∞–π–ª—É");
                ShowUsage();
                return;
            }

            RunPatching(dllPath);
        }

        static void RunPatching(string dllPath)
        {
            Console.WriteLine($"üìÇ –ò—Å–ø–æ–ª—å–∑—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å: {dllPath}");

            if (!File.Exists(dllPath))
            {
                Console.WriteLine($"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {dllPath}");
                return;
            }

            using (var manager = new DllManager())
            {
                Console.WriteLine($"üìÇ –ó–∞–≥—Ä—É–∂–∞—é —Å–±–æ—Ä–∫—É: {dllPath}");
                if (!manager.LoadAssembly(dllPath))
                {
                    Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–±–æ—Ä–∫—É");
                    return;
                }

                if (manager.ApplyAllPatches())
                {
                    Console.WriteLine("\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω—É—é —Å–±–æ—Ä–∫—É...");
                    
                    var directory = Path.GetDirectoryName(dllPath);
                    var filename = Path.GetFileNameWithoutExtension(dllPath);
                    var extension = Path.GetExtension(dllPath);
                    var outputPath = Path.Combine(directory, $"{filename}-Patched{extension}");
                    
                    if (manager.SavePatched(outputPath))
                    {
                        Console.WriteLine("‚úÖ –ü–∞—Ç—á–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
                        Console.WriteLine($"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {outputPath}");
                        Console.WriteLine("\nüéâ –ì–æ—Ç–æ–≤–æ! –ó–∞–º–µ–Ω–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω—ã–π.");
                    }
                    else
                    {
                        Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞");
                    }
                }
                else
                {
                    Console.WriteLine("‚ùå –ü–∞—Ç—á–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏");
                }
            }
        }

        static void ShowUsage()
        {
            Console.WriteLine("=== RustEdit Pro Crack Tool ===");
            Console.WriteLine("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
            Console.WriteLine("  dotnet run <dll-path>");
            Console.WriteLine();
            Console.WriteLine("–ü—Ä–∏–º–µ—Ä:");
            Console.WriteLine("  dotnet run Assembly-CSharp.dll");
        }
    }
} 
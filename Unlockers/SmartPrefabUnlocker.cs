using Mono.Cecil;
using Mono.Cecil.Cil;
using System;
using System.Linq;

namespace RustEditProCrack.Unlockers
{
    /// <summary>
    /// –£–º–Ω—ã–π –ø–∞—Ç—á–µ—Ä –ø—Ä–µ—Ñ–∞–±–æ–≤ - —É–¥–∞–ª—è–µ—Ç –¢–û–õ–¨–ö–û —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö, —Å–æ—Ö—Ä–∞–Ω—è—è –ª–æ–≥–∏–∫—É
    /// </summary>
    public class SmartPrefabUnlocker
    {
        private readonly AssemblyDefinition assembly;

        public SmartPrefabUnlocker(AssemblyDefinition assembly)
        {
            this.assembly = assembly;
        }

        /// <summary>
        /// –£–º–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–∫—É
        /// </summary>
        public bool UnlockPrefabsSmartly()
        {
            Console.WriteLine("üß† === –£–ú–ù–ê–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–†–ï–§–ê–ë–û–í ===");
            
            try
            {
                var methods = FindAllPrefabMethods();
                
                if (!methods.Any())
                {
                    Console.WriteLine("‚ùå –ú–µ—Ç–æ–¥—ã —Å 'Prefab.FileDoesntExist' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                    return false;
                }
                
                bool allSuccessful = true;
                foreach (var (method, className, methodName) in methods)
                {
                    Console.WriteLine($"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {className}.{methodName}");
                    
                    if (!RemoveErrorMessagesOnly(method))
                    {
                        Console.WriteLine($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {className}.{methodName}");
                        allSuccessful = false;
                    }
                    else
                    {
                        Console.WriteLine($"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω {className}.{methodName}");
                    }
                }
                
                if (allSuccessful)
                {
                    Console.WriteLine("\nüéâ –í–°–ï –ü–†–ï–§–ê–ë–´ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–´ –£–ú–ù–û!");
                }
                
                return allSuccessful;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –∫–æ—Ä—É—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å "Prefab.FileDoesntExist" (–∫–∞–∫ –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–∏)
        /// </summary>
        private System.Collections.Generic.List<(MethodDefinition method, string className, string methodName)> FindAllPrefabMethods()
        {
            Console.WriteLine("üîç –ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û –ö–û–†–£–¢–ò–ù —Å 'Prefab.FileDoesntExist'...");
            
            var foundMethods = new System.Collections.Generic.List<(MethodDefinition, string, string)>();
            
            foreach (var type in assembly.MainModule.Types)
            {
                // –û–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã - –¢–û–õ–¨–ö–û –∫–æ—Ä—É—Ç–∏–Ω—ã
                foreach (var method in type.Methods)
                {
                    if (IsCoroutine(method) && ContainsString(method, "Prefab.FileDoesntExist"))
                    {
                        Console.WriteLine($"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ—Ä—É—Ç–∏–Ω–∞: {type.Name}.{method.Name}");
                        foundMethods.Add((method, type.Name, method.Name));
                    }
                }
                
                // –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã (state machines) - –≤—Å–µ–≥–¥–∞ –∫–æ—Ä—É—Ç–∏–Ω—ã
                foreach (var nestedType in type.NestedTypes)
                {
                    foreach (var method in nestedType.Methods)
                    {
                        if (ContainsString(method, "Prefab.FileDoesntExist"))
                        {
                            Console.WriteLine($"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ state machine: {type.Name}.{nestedType.Name}.{method.Name}");
                            foundMethods.Add((method, $"{type.Name}.{nestedType.Name}", method.Name));
                        }
                    }
                }
            }
            
            Console.WriteLine($"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä—É—Ç–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {foundMethods.Count}");
            return foundMethods;
        }

        /// <summary>
        /// SURGICAL —É–¥–∞–ª–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–æ–π
        /// </summary>
        private bool RemoveErrorMessagesOnly(MethodDefinition method)
        {
            Console.WriteLine($"üî¨ SURGICAL —É–¥–∞–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ {method.Name}...");
            
            try
            {
                var instructions = method.Body.Instructions;
                var ilProcessor = method.Body.GetILProcessor();
                
                bool foundAny = false;
                
                // –≠–¢–ê–ü 1: –ò–°–ü–†–ê–í–õ–Ø–ï–ú flag = true –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
                Console.WriteLine("üîß === –≠–¢–ê–ü 1: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï flag = true ===");
                Console.WriteLine("üéØ –ò—â–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é flag = false –ø–µ—Ä–µ–¥ File.Exists –ø—Ä–æ–≤–µ—Ä–∫–æ–π...");
                
                for (int i = 0; i < instructions.Count - 5; i++)
                {
                    var inst = instructions[i];
                    
                    // –ò—â–µ–º ldc.i4.0 –ü–ï–†–ï–î File.Exists –≤—ã–∑–æ–≤–æ–º
                    if (inst.OpCode == OpCodes.Ldc_I4_0)
                    {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É flag –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        bool isFlag = false;
                        
                        // –ò—â–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 5 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö File.Exists
                        for (int j = i + 1; j < Math.Min(instructions.Count, i + 10); j++)
                        {
                            var checkInst = instructions[j];
                            if (checkInst.OpCode == OpCodes.Call && 
                                checkInst.Operand?.ToString().Contains("File::Exists") == true)
                            {
                                Console.WriteLine($"üéØ –ù–∞–π–¥–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è flag = false –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i} –ø–µ—Ä–µ–¥ File.Exists");
                                isFlag = true;
                                break;
                            }
                        }
                        
                        if (isFlag)
                        {
                            Console.WriteLine($"üîÑ –ó–ê–ú–ï–ù–ê: {i}: ldc.i4.0 ‚Üí ldc.i4.1 (flag = true)");
                            ilProcessor.Replace(inst, Instruction.Create(OpCodes.Ldc_I4_1));
                            foundAny = true;
                            break; // –ù–∞—à–ª–∏ - —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                        }
                    }
                }
                
                // –≠–¢–ê–ü 2: –£–ë–ò–†–ê–ï–ú –í–°–Æ –õ–û–ì–ò–ö–£ –ü–†–û–í–ï–†–ö–ò –ß–ï–ö–°–£–ú–ú–´
                Console.WriteLine("üî• === –≠–¢–ê–ü 2: –£–ë–ò–†–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –ß–ï–ö–°–£–ú–ú–´ ===");
                Console.WriteLine("üí° –ó–∞–º–µ–Ω—è–µ–º –í–°–Æ –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫—Å—É–º–º—ã –Ω–∞ flag = true");
                
                for (int i = 0; i < instructions.Count - 10; i++)
                {
                    var inst = instructions[i];
                    
                    // –ò—â–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—è checksum (ldfld checksum)
                    if (inst.OpCode == OpCodes.Ldfld && 
                        inst.Operand?.ToString().Contains("checksum") == true)
                    {
                        Console.WriteLine($"üéØ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ checksum –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}");
                        
                        // –ò—â–µ–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫—Å—É–º–º—ã - —Å–ª–µ–¥—É—é—â–∏–π stloc.s V_8 (flag)
                        for (int j = i + 1; j < Math.Min(instructions.Count, i + 25); j++)
                        {
                            var endInst = instructions[j];
                            
                            // –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ flag (V_8)
                            if (endInst.OpCode == OpCodes.Stloc_S)
                            {
                                Console.WriteLine($"üî• –ó–ê–ú–ï–ù–Ø–ï–ú –í–ï–°–¨ –ë–õ–û–ö –ü–†–û–í–ï–†–ö–ò –ß–ï–ö–°–£–ú–ú–´ (–ø–æ–∑–∏—Ü–∏–∏ {i}-{j})");
                                
                                // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:
                                // 1. –ó–∞–º–µ–Ω—è–µ–º ldfld checksum –Ω–∞ pop (—É–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ —Å—Ç–µ–∫–∞)
                                // 2. –ó–∞–º–µ–Ω—è–µ–º –≤—Å—ë –¥–æ stloc.s –Ω–∞ ldc.i4.1 + NOP
                                
                                Console.WriteLine($"   üîÑ –ó–ê–ú–ï–ù–ê: {i}: {instructions[i].OpCode} ‚Üí pop (—É–±–∏—Ä–∞–µ–º checksum —Å–æ —Å—Ç–µ–∫–∞)");
                                ilProcessor.Replace(instructions[i], Instruction.Create(OpCodes.Pop));
                                
                                // –°–ª–µ–¥—É—é—â—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ ldc.i4.1
                                if (i + 1 < j)
                                {
                                    Console.WriteLine($"   üîÑ –ó–ê–ú–ï–ù–ê: {i + 1}: {instructions[i + 1].OpCode} ‚Üí ldc.i4.1 (true)");
                                    ilProcessor.Replace(instructions[i + 1], Instruction.Create(OpCodes.Ldc_I4_1));
                                }
                                
                                // –í—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ NOP
                                for (int k = i + 2; k < j; k++)
                                {
                                    Console.WriteLine($"   üîÑ –ó–ê–ú–ï–ù–ê: {k}: {instructions[k].OpCode} ‚Üí nop");
                                    ilProcessor.Replace(instructions[k], Instruction.Create(OpCodes.Nop));
                                }
                                
                                // –ü–æ—Å–ª–µ–¥–Ω—é—é (stloc.s) –æ—Å—Ç–∞–≤–ª—è–µ–º - –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç true –≤ flag
                                Console.WriteLine($"   ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú: {j}: {endInst.OpCode} (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ flag)");
                                
                                foundAny = true;
                                break;
                            }
                        }
                        
                        break; // –ù–∞—à–ª–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –±–ª–æ–∫
                    }
                }

                // –≠–¢–ê–ü 3: –£–ë–ò–†–ê–ï–ú –°–û–û–ë–©–ï–ù–ò–Ø –û–ë –û–®–ò–ë–ö–ê–•  
                Console.WriteLine("üî¨ === –≠–¢–ê–ü 3: –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô –û–ë –û–®–ò–ë–ö–ê–• ===");
                for (int i = 0; i < instructions.Count; i++)
                {
                    var inst = instructions[i];
                    
                    // –ù–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏
                    if (inst.OpCode == OpCodes.Ldstr && 
                        inst.Operand?.ToString() == "Prefab.FileDoesntExist")
                    {
                        Console.WriteLine($"üéØ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –æ—à–∏–±–∫–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}");
                        foundAny = true;
                        
                        Console.WriteLine("üí° –£–¥–∞–ª—è–µ–º –¢–û–õ–¨–ö–û —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –ù–ï –¢–†–û–ì–ê–Ø –ª–æ–≥–∏–∫—É!");
                        
                        // –ò—â–µ–º –≤–µ—Å—å –±–ª–æ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ç ldstr –¥–æ PopupHandler)
                        Console.WriteLine("üîç –ü–æ–∏—Å–∫ –±–ª–æ–∫–∞ –æ—à–∏–±–∫–∏...");
                        bool foundPopupHandler = false;
                        
                        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –î–û–ü–û–õ–ù–ï–ù–ò–ï: –∑–∞–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –Ω–∞ NOP –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                        Console.WriteLine("üîß –ó–ê–ú–ï–ù–Ø–ï–ú —É–¥–∞–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –Ω–∞ NOP –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã");
                        
                        // –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫ –æ—à–∏–±–∫–∏ –Ω–∞ NOP
                        for (int j = i; j < Math.Min(instructions.Count, i + 15); j++)
                        {
                            var errorInst = instructions[j];
                            
                            Console.WriteLine($"   üîÑ –ó–ê–ú–ï–ù–ê: {j}: {errorInst.OpCode} ‚Üí nop");  
                            ilProcessor.Replace(errorInst, Instruction.Create(OpCodes.Nop));
                            
                            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ PopupHandler –∏–ª–∏ –±–µ–∑—É—Å–ª–æ–≤–Ω–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ
                            if ((errorInst.OpCode == OpCodes.Call && 
                                 errorInst.Operand?.ToString().Contains("QueueMessage") == true) ||
                                errorInst.OpCode == OpCodes.Br || errorInst.OpCode == OpCodes.Br_S)
                            {
                                Console.WriteLine($"üèÅ –ö–æ–Ω–µ—Ü –∑–∞–º–µ–Ω—ã –±–ª–æ–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {j}");
                                foundPopupHandler = true;
                                break;
                            }
                        }
                        
                        if (!foundPopupHandler)
                        {
                            Console.WriteLine("‚ö†Ô∏è PopupHandler –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–º–µ–Ω–∏–ª —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É");
                        }
                    }
                }
                
                if (!foundAny)
                {
                    Console.WriteLine("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
                    return false;
                }
                
                if (foundAny)
                {
                    Console.WriteLine($"‚úÖ SURGICAL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!");
                    Console.WriteLine("üîß flag = true –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                    Console.WriteLine("üî• –í–°–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫—Å—É–º–º—ã –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ flag = true");
                    Console.WriteLine("üî¨ –ë–ª–æ–∫ –æ—à–∏–±–∫–∏ –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ NOP - —Å—Ç–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
                    Console.WriteLine("üéâ –ü—Ä–µ—Ñ–∞–±—ã —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ë–ï–ó –í–°–Ø–ö–ò–• –ü–†–û–í–ï–†–û–ö!");
                    return true;
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û–®–ò–ë–ö–ê: {ex.Message}");
                return false;
            }
        }

        private bool IsCoroutine(MethodDefinition method)
        {
            if (!method.HasBody) return false;
            
            var returnType = method.ReturnType.FullName;
            return returnType.Contains("IEnumerable") || 
                   returnType.Contains("IEnumerator") ||
                   method.CustomAttributes.Any(attr => attr.AttributeType.Name.Contains("IteratorStateMachine"));
        }

        private bool ContainsString(MethodDefinition method, string searchString)
        {
            if (!method.HasBody) return false;
            
            return method.Body.Instructions
                .Where(i => i.OpCode == OpCodes.Ldstr)
                .Any(i => i.Operand?.ToString().Contains(searchString) == true);
        }

        /// <summary>
        /// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã —Å "Prefab.FileDoesntExist"
        /// </summary>
        public System.Collections.Generic.List<(MethodDefinition method, string className, string methodName)> FindAllPrefabMethodsPublic()
        {
            return FindAllPrefabMethods();
        }
    }
} 
using System;
using System.Linq;
using Mono.Cecil;
using Mono.Cecil.Cil;

namespace RustEditProCrack.Unlockers
{
    /// <summary>
    /// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ PRO —Ä–µ–∂–∏–º–∞ –≤ RustEdit Pro
    /// </summary>
    public class ProModeUnlocker
    {
        private readonly AssemblyDefinition assembly;
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
        private string proModeClassName = null;
        private string proModeMethodName = null;

        public ProModeUnlocker(AssemblyDefinition assembly)
        {
            this.assembly = assembly;
        }

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ PRO —Ä–µ–∂–∏–º–∞
        /// </summary>
        public bool UnlockProMode()
        {
            Console.WriteLine("üîß === –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê PRO –†–ï–ñ–ò–ú–ê ===");
            
            try
            {
                // –®–∞–≥ 1: –ò–∑–≤–ª–µ—á—å –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
                if (!ExtractObfuscatedNames())
                {
                    Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞");
                    return false;
                }

                // –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á PRO —Ä–µ–∂–∏–º–∞
                if (!ApplyProModePatch())
                {
                    Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á PRO —Ä–µ–∂–∏–º–∞");
                    return false;
                }

                // –®–∞–≥ 3: –£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
                if (!RemoveProModeBlocks())
                {
                    Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã");
                    return false;
                }

                Console.WriteLine("‚úÖ PRO –†–ï–ñ–ò–ú –£–°–ü–ï–®–ù–û –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù!");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ PRO —Ä–µ–∂–∏–º–∞: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ DiscordPresence
        /// </summary>
        private bool ExtractObfuscatedNames()
        {
            Console.WriteLine("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω...");
            
            var discordType = assembly.MainModule.Types
                .FirstOrDefault(t => t.Name.Contains("DiscordPresence"));

            if (discordType == null)
            {
                Console.WriteLine("‚ùå DiscordPresence –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return false;
            }

            var updateMethod = discordType.Methods
                .FirstOrDefault(m => m.Name == "UpdateActivity");

            if (updateMethod?.HasBody != true)
            {
                Console.WriteLine("‚ùå UpdateActivity –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return false;
            }

            var instructions = updateMethod.Body.Instructions;

            for (int i = 0; i < instructions.Count; i++)
            {
                var inst = instructions[i];

                if (inst.OpCode == OpCodes.Ldstr && inst.Operand?.ToString() == "512_2")
                {
                    int start = Math.Max(0, i - 20);
                    int end = Math.Min(instructions.Count - 1, i + 10);

                    for (int k = start; k <= end; k++)
                    {
                        var contextInst = instructions[k];

                        if ((contextInst.OpCode == OpCodes.Call || contextInst.OpCode == OpCodes.Callvirt) &&
                            contextInst.Operand is MethodReference methodRef)
                        {
                            if (methodRef.ReturnType?.FullName == "System.Boolean" &&
                                IsObfuscatedName(methodRef.DeclaringType.Name) &&
                                IsObfuscatedName(methodRef.Name) &&
                                methodRef.Parameters.Count == 0)
                            {
                                proModeClassName = methodRef.DeclaringType.Name;
                                proModeMethodName = methodRef.Name;
                                
                                Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞:");
                                Console.WriteLine($"   –ö–ª–∞—Å—Å: {proModeClassName}");
                                Console.WriteLine($"   –ú–µ—Ç–æ–¥: {proModeMethodName}");
                                return true;
                            }
                        }
                    }
                    break;
                }
            }

            return false;
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ PRO —Ä–µ–∂–∏–º–∞
        /// </summary>
        private bool ApplyProModePatch()
        {
            Console.WriteLine("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ PRO —Ä–µ–∂–∏–º–∞...");
            
            var proModeClass = assembly.MainModule.Types
                .FirstOrDefault(t => t.Name == proModeClassName);

            if (proModeClass == null)
            {
                Console.WriteLine($"‚ùå PRO –∫–ª–∞—Å—Å {proModeClassName} –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return false;
            }

            var proModeMethod = proModeClass.Methods
                .FirstOrDefault(m => m.Name == proModeMethodName);

            if (proModeMethod?.HasBody != true)
            {
                Console.WriteLine($"‚ùå PRO –º–µ—Ç–æ–¥ {proModeMethodName} –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return false;
            }

            Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω PRO –º–µ—Ç–æ–¥: {proModeClassName}.{proModeMethodName}");

            return PatchMethodToReturnTrue(proModeMethod);
        }

        /// <summary>
        /// –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤ PRO —Ä–µ–∂–∏–º–∞
        /// </summary>
        private bool RemoveProModeBlocks()
        {
            Console.WriteLine("üîß –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤ PRO —Ä–µ–∂–∏–º–∞...");
            
            var njfClass = assembly.MainModule.Types
                .FirstOrDefault(t => t.Name == "NJFSINOIPNMDA");

            if (njfClass == null)
            {
                Console.WriteLine("‚ùå NJFSINOIPNMDA –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return false;
            }

            Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω NJFSINOIPNMDA –∫–ª–∞—Å—Å —Å {njfClass.Methods.Count} –º–µ—Ç–æ–¥–∞–º–∏");

            int modifiedMethods = 0;

            foreach (var method in njfClass.Methods)
            {
                if (!method.HasBody || method.Name == ".ctor" || method.Name == "Awake")
                    continue;

                if (ContainsProModeCheck(method))
                {
                    Console.WriteLine($"üéØ –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –º–µ—Ç–æ–¥: {method.Name}()");
                    
                    if (ClearBlockingMethod(method))
                    {
                        modifiedMethods++;
                        Console.WriteLine($"   ‚úÖ –ú–µ—Ç–æ–¥ –æ—á–∏—â–µ–Ω");
                    }
                }
            }

            Console.WriteLine($"‚úÖ –û—á–∏—â–µ–Ω–æ {modifiedMethods} –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤");
            return modifiedMethods > 0;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–µ—Ç–æ–¥ PRO –ø—Ä–æ–≤–µ—Ä–∫—É
        /// </summary>
        private bool ContainsProModeCheck(MethodDefinition method)
        {
            if (!method.HasBody || string.IsNullOrEmpty(proModeClassName)) 
                return false;

            var instructions = method.Body.Instructions;
            for (int i = 0; i < instructions.Count - 1; i++)
            {
                var inst = instructions[i];
                var nextInst = instructions[i + 1];

                if (inst.OpCode == OpCodes.Call &&
                    inst.Operand is MethodReference methodRef &&
                    methodRef.DeclaringType?.Name == proModeClassName &&
                    methodRef.ReturnType?.FullName == "System.Boolean")
                {
                    if (nextInst.OpCode == OpCodes.Brfalse_S || nextInst.OpCode == OpCodes.Brfalse)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        /// <summary>
        /// –û—á–∏—Å—Ç–∫–∞ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞
        /// </summary>
        private bool ClearBlockingMethod(MethodDefinition method)
        {
            try
            {
                method.Body.Instructions.Clear();
                method.Body.Instructions.Add(Instruction.Create(OpCodes.Ret));
                method.Body.Variables.Clear();
                method.Body.ExceptionHandlers.Clear();
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ç–æ–¥–∞: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ü–∞—Ç—á –º–µ—Ç–æ–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ true
        /// </summary>
        private bool PatchMethodToReturnTrue(MethodDefinition method)
        {
            try
            {
                method.Body.Instructions.Clear();
                method.Body.Instructions.Add(Instruction.Create(OpCodes.Ldc_I4_1)); // load 1 (true)
                method.Body.Instructions.Add(Instruction.Create(OpCodes.Ret));      // return
                method.Body.Variables.Clear();
                method.Body.ExceptionHandlers.Clear();
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∞ –º–µ—Ç–æ–¥–∞: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        /// </summary>
        private bool IsObfuscatedName(string name)
        {
            return name.Length >= 8 && name.Length <= 15 &&
                   name.All(c => char.IsUpper(c) || char.IsDigit(c)) &&
                   name.Any(char.IsLetter);
        }
    }
} 
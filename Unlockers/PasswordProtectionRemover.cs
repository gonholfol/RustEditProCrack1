using System;
using System.Linq;
using System.Collections.Generic;
using Mono.Cecil;
using Mono.Cecil.Cil;

namespace RustEditProCrack.Unlockers
{
    /// <summary>
    /// –ö–ª–∞—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º –≤ RustEdit Pro
    /// </summary>
    public class PasswordProtectionRemover
    {
        private readonly AssemblyDefinition assembly;

        public PasswordProtectionRemover(AssemblyDefinition assembly)
        {
            this.assembly = assembly;
        }

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º
        /// </summary>
        public bool RemovePasswordProtection()
        {
            Console.WriteLine("üîß === –£–î–ê–õ–ï–ù–ò–ï PASSWORD PROTECTION ===");
            
            try
            {
                // –ü–∞—Ç—á 1: –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º (NGILNCKJOAM.ENIPGGOKCNF)
                bool patchedFileProtectionCheck = PatchFilePasswordProtectionMethod();
                
                // –ü–∞—Ç—á 2: –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è (DEEDFDIKIKJ)
                bool patchedPasswordValidation = PatchPasswordValidationMethods();
                
                // –ü–∞—Ç—á 3: –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è (HSUDFEEOGKC)
                bool patchedPasswordDialog = PatchPasswordDialogMethods();
                
                return patchedFileProtectionCheck || patchedPasswordValidation || patchedPasswordDialog;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º: {ex.Message}");
                Console.WriteLine($"   {ex.StackTrace}");
                return false;
            }
        }

        /// <summary>
        /// –ü–∞—Ç—á–∏—Ç –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ –ø–∞—Ä–æ–ª–µ–º (–∞–Ω–∞–ª–æ–≥ NGILNCKJOAM.ENIPGGOKCNF)
        /// </summary>
        private bool PatchFilePasswordProtectionMethod()
        {
            Console.WriteLine("üîç –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º...");
            
            // –ò—â–µ–º –∫–ª–∞—Å—Å –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (–∞–Ω–∞–ª–æ–≥ NGILNCKJOAM)
            TypeDefinition fileProtectionClass = FindFileProtectionClass();

            if (fileProtectionClass == null)
            {
                Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç—ã —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä–æ–ª–µ–º");
                return false;
            }

            Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º: {fileProtectionClass.Name}");
            
            // –ò—â–µ–º –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ –ø–∞—Ä–æ–ª–µ–º (–∞–Ω–∞–ª–æ–≥ ENIPGGOKCNF)
            MethodDefinition fileProtectionMethod = FindFileProtectionMethod(fileProtectionClass);

            if (fileProtectionMethod == null)
            {
                Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º");
                return false;
            }

            Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º: {fileProtectionMethod.Name}");
            
            // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª false
            if (fileProtectionMethod.HasBody)
            {
                var il = fileProtectionMethod.Body.GetILProcessor();
                fileProtectionMethod.Body.Instructions.Clear();
                il.Append(Instruction.Create(OpCodes.Ldc_I4_0)); // –ó–∞–≥—Ä—É–∂–∞–µ–º false (0)
                il.Append(Instruction.Create(OpCodes.Ret));      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false
                
                Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ {fileProtectionMethod.Name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false");
                return true;
            }
            
            Console.WriteLine($"‚ùå –ú–µ—Ç–æ–¥ {fileProtectionMethod.Name} –Ω–µ –∏–º–µ–µ—Ç —Ç–µ–ª–∞");
            return false;
        }
        
        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞—â–∏—Ç—ã —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä–æ–ª–µ–º (–∞–Ω–∞–ª–æ–≥ NGILNCKJOAM)
        /// </summary>
        private TypeDefinition FindFileProtectionClass()
        {
            // 1. –ü–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            var knownClass = assembly.MainModule.GetTypes()
                .FirstOrDefault(t => t.Name == "NGILNCKJOAM");
                
            if (knownClass != null)
                return knownClass;
                
            // 2. –ü–æ–∏—Å–∫ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º - –∫–ª–∞—Å—Å —Å –º–µ—Ç–æ–¥–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –∑–∞—â–∏—Ç—É –ø–∞—Ä–æ–ª–µ–º
            // –¢–∞–∫–∏–µ –∫–ª–∞—Å—Å—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç File.Exists
            foreach (var type in assembly.MainModule.GetTypes())
            {
                if (type.Methods.Any(m => 
                    m.HasBody && 
                    m.ReturnType.FullName == "System.Boolean" &&
                    m.Parameters.Count == 1 && 
                    m.Parameters[0].ParameterType.FullName == "System.String" &&
                    ContainsFileCheck(m)))
                {
                    return type;
                }
            }
            
            return null;
        }
        
        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –º–µ—Ç–æ–¥, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –∑–∞—â–∏—â–µ–Ω –ª–∏ —Ñ–∞–π–ª –ø–∞—Ä–æ–ª–µ–º (–∞–Ω–∞–ª–æ–≥ ENIPGGOKCNF)
        /// </summary>
        private MethodDefinition FindFileProtectionMethod(TypeDefinition classType)
        {
            // 1. –ü–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            var knownMethod = classType.Methods
                .FirstOrDefault(m => m.Name == "ENIPGGOKCNF");
                
            if (knownMethod != null)
                return knownMethod;
                
            // 2. –ü–æ–∏—Å–∫ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º - –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –ø–∞—Ä–æ–ª–µ–º
            // –¢–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (string), –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç boolean 
            // –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ (File.Exists) —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤ –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º
            foreach (var method in classType.Methods)
            {
                if (method.HasBody && 
                    method.ReturnType.FullName == "System.Boolean" &&
                    method.Parameters.Count == 1 && 
                    method.Parameters[0].ParameterType.FullName == "System.String" &&
                    ContainsFileCheck(method))
                {
                    return method;
                }
            }
            
            return null;
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤—ã—Ö –ø—É—Ç–µ–π
        /// </summary>
        private bool ContainsFileCheck(MethodDefinition method)
        {
            if (!method.HasBody)
                return false;
                
            bool containsFileExists = false;
            bool containsPathManipulation = false;
            
            foreach (var inst in method.Body.Instructions)
            {
                if (inst.OpCode == OpCodes.Call && inst.Operand is MethodReference mr)
                {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∑–æ–≤ File.Exists
                    if (mr.DeclaringType.FullName == "System.IO.File" && mr.Name == "Exists")
                    {
                        containsFileExists = true;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ Path –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏
                    if (mr.DeclaringType.FullName == "System.IO.Path")
                    {
                        containsPathManipulation = true;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤
                if (inst.OpCode == OpCodes.Ldstr && inst.Operand is string str)
                {
                    string lower = str.ToLowerInvariant();
                    if (lower.Contains(".pwd") || lower.Contains(".key") || lower.EndsWith(".ps") || 
                        lower.Contains("password") || lower.Contains("–∑–∞—â–∏—Ç") || 
                        lower.Contains("protect"))
                    {
                        return true;
                    }
                }
            }
            
            return containsFileExists && containsPathManipulation;
        }
        
        /// <summary>
        /// –ü–∞—Ç—á–∏—Ç –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥ DEEDFDIKIKJ)
        /// </summary>
        private bool PatchPasswordValidationMethods()
        {
            Console.WriteLine("üîç –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è...");
            
            // –ò—â–µ–º –∫–ª–∞—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (–∞–Ω–∞–ª–æ–≥ DEEDFDIKIKJ)
            TypeDefinition passwordValidationClass = FindPasswordValidationClass();
            
            if (passwordValidationClass == null)
            {
                Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è");
                return false;
            }
            
            Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {passwordValidationClass.Name}");
            
            bool patchedAny = false;
            
            // –ü–∞—Ç—á–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è (BCFBBFAIKFI –∏ PENGPPJKOGC)
            string[] knownPropertyNames = { "BCFBBFAIKFI", "PENGPPJKOGC" };
            foreach (var propName in knownPropertyNames)
            {
                PropertyDefinition property = passwordValidationClass.Properties
                    .FirstOrDefault(p => p.Name == propName && p.PropertyType.FullName == "System.Boolean");
                    
                if (property != null && property.GetMethod != null && property.GetMethod.HasBody)
                {
                    Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {property.Name}");
                    
                    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≥–µ—Ç—Ç–µ—Ä —Å–≤–æ–π—Å—Ç–≤–∞, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª false
                    var il = property.GetMethod.Body.GetILProcessor();
                    property.GetMethod.Body.Instructions.Clear();
                    il.Append(Instruction.Create(OpCodes.Ldc_I4_0)); // –ó–∞–≥—Ä—É–∂–∞–µ–º false (0)
                    il.Append(Instruction.Create(OpCodes.Ret));      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false
                    
                    Console.WriteLine($"‚úÖ –°–≤–æ–π—Å—Ç–≤–æ {property.Name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–æ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false");
                    patchedAny = true;
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞, –∏—â–µ–º –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
            if (!patchedAny)
            {
                foreach (var property in passwordValidationClass.Properties)
                {
                    if (property.PropertyType.FullName == "System.Boolean" && 
                        property.GetMethod != null && 
                        property.GetMethod.HasBody)
                    {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–æ –ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª—è
                        bool isPasswordProperty = IsPasswordRelatedProperty(property);
                        
                        if (isPasswordProperty)
                        {
                            Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {property.Name}");
                            
                            // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≥–µ—Ç—Ç–µ—Ä —Å–≤–æ–π—Å—Ç–≤–∞, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª false
                            var il = property.GetMethod.Body.GetILProcessor();
                            property.GetMethod.Body.Instructions.Clear();
                            il.Append(Instruction.Create(OpCodes.Ldc_I4_0)); // –ó–∞–≥—Ä—É–∂–∞–µ–º false (0)
                            il.Append(Instruction.Create(OpCodes.Ret));      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false
                            
                            Console.WriteLine($"‚úÖ –°–≤–æ–π—Å—Ç–≤–æ {property.Name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–æ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false");
                            patchedAny = true;
                        }
                    }
                }
            }
            
            // –ò—â–µ–º –∏ –ø–∞—Ç—á–∏–º –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥–∏ HDIFCDOGJNE, DDMMKBPGGFP –∏ —Ç.–¥.)
            var validationMethods = FindPasswordValidationMethods(passwordValidationClass);
            
            foreach (var method in validationMethods)
            {
                Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {method.Name}");
                
                // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª true
                var il = method.Body.GetILProcessor();
                method.Body.Instructions.Clear();
                il.Append(Instruction.Create(OpCodes.Ldc_I4_1)); // –ó–∞–≥—Ä—É–∂–∞–µ–º true (1)
                il.Append(Instruction.Create(OpCodes.Ret));      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true
                
                Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ {method.Name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true");
                patchedAny = true;
            }
            
            return patchedAny;
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤—è–∑–∞–Ω–æ –ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª—è
        /// </summary>
        private bool IsPasswordRelatedProperty(PropertyDefinition property)
        {
            if (property.GetMethod == null || !property.GetMethod.HasBody)
                return false;
                
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Å–≤–æ–π—Å—Ç–≤–∞
            string name = property.Name.ToLowerInvariant();
            if (name.Contains("pass") || 
                name.Contains("pwd") || 
                name.Contains("protect") || 
                name.Contains("secure") || 
                name.Contains("valid"))
            {
                return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–æ–ª—é, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–≤–æ–π—Å—Ç–≤–µ
            foreach (var inst in property.GetMethod.Body.Instructions)
            {
                if (inst.OpCode == OpCodes.Ldfld && inst.Operand is FieldReference fr)
                {
                    string fieldName = fr.Name.ToLowerInvariant();
                    if (fieldName.Contains("pass") || 
                        fieldName.Contains("pwd") || 
                        fieldName.Contains("protect") || 
                        fieldName.Contains("secure") || 
                        fieldName.Contains("valid"))
                    {
                        return true;
                    }
                }
            }
            
            return false;
        }
        
        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥ DEEDFDIKIKJ)
        /// </summary>
        private TypeDefinition FindPasswordValidationClass()
        {
            // 1. –ü–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            var knownClass = assembly.MainModule.GetTypes()
                .FirstOrDefault(t => t.Name == "DEEDFDIKIKJ");
                
            if (knownClass != null)
                return knownClass;
                
            // 2. –ü–æ–∏—Å–∫ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –∫–ª–∞—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
            List<TypeDefinition> candidates = new List<TypeDefinition>();
            
            foreach (var type in assembly.MainModule.GetTypes())
            {
                // –¢–∞–∫–∏–µ –∫–ª–∞—Å—Å—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –±—É–ª–µ–≤—ã —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
                int booleanProperties = type.Properties.Count(p => 
                    p.PropertyType.FullName == "System.Boolean" && p.GetMethod != null);
                    
                int booleanMethods = type.Methods.Count(m => 
                    m.ReturnType.FullName == "System.Boolean" && 
                    m.HasBody && 
                    (m.Parameters.Count == 0 || m.Parameters.Count == 1 && m.Parameters[0].ParameterType.FullName == "System.String"));
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–æ–ª–µ–º
                bool hasPasswordStrings = false;
                foreach (var method in type.Methods)
                {
                    if (method.HasBody)
                    {
                        foreach (var inst in method.Body.Instructions)
                        {
                            if (inst.OpCode == OpCodes.Ldstr && inst.Operand is string str)
                            {
                                string lower = str.ToLowerInvariant();
                                if (lower.Contains("password") || 
                                    lower.Contains("–ø–∞—Ä–æ–ª—å") || 
                                    lower.Contains("–∑–∞—â–∏—â–µ–Ω") || 
                                    lower.Contains("protected") || 
                                    lower.Contains("pwd") || 
                                    lower.Contains("secure"))
                                {
                                    hasPasswordStrings = true;
                                    break;
                                }
                            }
                        }
                        if (hasPasswordStrings) break;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–æ–ª–µ–º
                bool hasPasswordFields = type.Fields.Any(f => 
                    f.Name.ToLowerInvariant().Contains("password") || 
                    f.Name.ToLowerInvariant().Contains("pass") || 
                    f.Name.ToLowerInvariant().Contains("pwd") || 
                    f.Name.ToLowerInvariant().Contains("secure"));
                
                // –í—ã—á–∏—Å–ª—è–µ–º "—Ä–µ–π—Ç–∏–Ω–≥" –∫–ª–∞—Å—Å–∞ –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                int score = 0;
                if (booleanProperties >= 1) score += booleanProperties * 2;
                if (booleanMethods >= 3) score += booleanMethods;
                if (hasPasswordStrings) score += 5;
                if (hasPasswordFields) score += 3;
                
                // –ï—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–∞–±—Ä–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
                if (score >= 5)
                {
                    candidates.Add(type);
                }
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ "—Ä–µ–π—Ç–∏–Ω–≥—É" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–µ–≥–æ
            if (candidates.Count > 0)
            {
                var bestCandidate = candidates.OrderByDescending(c => 
                    c.Properties.Count(p => p.PropertyType.FullName == "System.Boolean") + 
                    c.Methods.Count(m => m.ReturnType.FullName == "System.Boolean") * 2).First();
                    
                return bestCandidate;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º, –∏—â–µ–º –∫–ª–∞—Å—Å —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±—É–ª–µ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –∏ –º–µ—Ç–æ–¥–æ–≤
            return assembly.MainModule.GetTypes()
                .OrderByDescending(t => 
                    t.Properties.Count(p => p.PropertyType.FullName == "System.Boolean") + 
                    t.Methods.Count(m => m.ReturnType.FullName == "System.Boolean") * 2)
                .FirstOrDefault();
        }
        
        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥–∏ HDIFCDOGJNE, DDMMKBPGGFP –∏ —Ç.–¥.)
        /// </summary>
        private List<MethodDefinition> FindPasswordValidationMethods(TypeDefinition classType)
        {
            var methods = new List<MethodDefinition>();
            
            // 1. –ü–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            string[] knownNames = { "HDIFCDOGJNE", "DDMMKBPGGFP", "IGAHKMCNLIN", "ODNEDFJEAAL", "FOLPAEOEMAF" };
            foreach (var name in knownNames)
            {
                var method = classType.Methods.FirstOrDefault(m => m.Name == name && m.ReturnType.FullName == "System.Boolean");
                if (method != null && method.HasBody)
                {
                    methods.Add(method);
                }
            }
            
            // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º, –∏—â–µ–º –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
            if (methods.Count == 0)
            {
                foreach (var method in classType.Methods)
                {
                    // –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç boolean –∏ –∏–º–µ—é—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    if (method.HasBody && 
                        method.ReturnType.FullName == "System.Boolean" && 
                        (method.Parameters.Count == 0 || method.Parameters.Count == 1 && 
                        method.Parameters[0].ParameterType.FullName == "System.String") &&
                        !method.Name.StartsWith("get_") && // –ò—Å–∫–ª—é—á–∞–µ–º –≥–µ—Ç—Ç–µ—Ä—ã —Å–≤–æ–π—Å—Ç–≤
                        !method.Name.StartsWith("set_"))   // –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ—Ç—Ç–µ—Ä—ã —Å–≤–æ–π—Å—Ç–≤
                    {
                        methods.Add(method);
                    }
                }
            }
            
            return methods;
        }
        
        /// <summary>
        /// –ü–∞—Ç—á–∏—Ç –º–µ—Ç–æ–¥—ã –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥ HSUDFEEOGKC)
        /// </summary>
        private bool PatchPasswordDialogMethods()
        {
            Console.WriteLine("üîç –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–æ–≤ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è...");
            
            // –ò—â–µ–º –∫–ª–∞—Å—Å –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (–∞–Ω–∞–ª–æ–≥ HSUDFEEOGKC)
            TypeDefinition dialogClass = FindPasswordDialogClass();
            
            if (dialogClass == null)
            {
                Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è");
                return false;
            }
            
            Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è: {dialogClass.Name}");
            
            bool patchedAny = false;
            
            // –ò—â–µ–º —Å–≤–æ–π—Å—Ç–≤–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥ FOLPAEOEMAF)
            PropertyDefinition passwordProperty = FindPasswordProperty(dialogClass);
            
            if (passwordProperty != null && passwordProperty.SetMethod != null)
            {
                MethodDefinition setMethod = passwordProperty.SetMethod;
                Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä–æ–ª—è: {passwordProperty.Name}");
                Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ—Ç—Ç–µ—Ä —Å–≤–æ–π—Å—Ç–≤–∞: {setMethod.Name}");
                
                // –ò—â–µ–º –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–µ—Ç—Ç–µ—Ä —Å–≤–æ–π—Å—Ç–≤–∞ –ø–∞—Ä–æ–ª—è (–≤—ã–∑—ã–≤–∞—é—Ç set_FOLPAEOEMAF)
                var passwordSetterMethods = FindPasswordSetterMethods(dialogClass, setMethod);
                
                // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                foreach (var method in passwordSetterMethods)
                {
                    Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Å–µ—Ç—Ç–µ—Ä {passwordProperty.Name}: {method.Name}");
                }
                
                // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–∞—Ç—á–∏—Ç—å –æ—Å–æ–±—ã–º –æ–±—Ä–∞–∑–æ–º
                string[] criticalMethodNames = { "LDJIAMBFFDO", "Reset", "CIHNHHDGLMI", "NHBKJMNDJGO" };
                
                foreach (var method in passwordSetterMethods)
                {
                    bool isCriticalMethod = criticalMethodNames.Contains(method.Name);
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ HPIGKCGMGEG –∏–ª–∏ –µ–≥–æ –∞–Ω–∞–ª–æ–≥ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Enter), –ø–∞—Ç—á–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
                    if (IsEnterButtonHandler(method) || method.Name == "HPIGKCGMGEG")
                    {
                        Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è: {method.Name}");
                        
                        var il = method.Body.GetILProcessor();
                        method.Body.Instructions.Clear();
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º this
                        il.Append(Instruction.Create(OpCodes.Ldarg_0));
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º true (1)
                        il.Append(Instruction.Create(OpCodes.Ldc_I4_1));
                        // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ç—Ç–µ—Ä FOLPAEOEMAF
                        il.Append(Instruction.Create(OpCodes.Call, setMethod));
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
                        il.Append(Instruction.Create(OpCodes.Ret));
                        
                        Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ {method.Name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω - –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {passwordProperty.Name} –≤ true");
                        patchedAny = true;
                    }
                    // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—á–∏–Ω–≥
                    else if (isCriticalMethod)
                    {
                        Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è: {method.Name}");
                        
                        // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—á–∏–Ω–≥
                        SafePatchPasswordMethod(method, setMethod);
                        
                        Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ {method.Name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω - –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {passwordProperty.Name} –≤ true");
                        patchedAny = true;
                    }
                }
            }
            
            // –ò—â–µ–º –º–µ—Ç–æ–¥ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥ HAIGGPJCCFI)
            MethodDefinition dialogMethod = FindPasswordDialogMethod(dialogClass);
            
            if (dialogMethod != null && dialogMethod.HasBody)
            {
                Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è: {dialogMethod.Name}");
                
                // –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π IEnumerator
                MethodReference emptyEnumeratorMethod = null;
                
                // –ò—â–µ–º –≤ –∫–æ–¥–µ –º–µ—Ç–æ–¥–∞ –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç IEnumerator
                foreach (var instruction in dialogMethod.Body.Instructions)
                {
                    if ((instruction.OpCode == OpCodes.Call || instruction.OpCode == OpCodes.Callvirt) && 
                        instruction.Operand is MethodReference mr && 
                        mr.ReturnType.FullName.Contains("IEnumerator"))
                    {
                        emptyEnumeratorMethod = mr;
                        break;
                    }
                }
                
                if (emptyEnumeratorMethod != null)
                {
                    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ HAIGGPJCCFI, —á—Ç–æ–±—ã –æ–Ω —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–ª –ø—É—Å—Ç–æ–π IEnumerator
                    var il = dialogMethod.Body.GetILProcessor();
                    dialogMethod.Body.Instructions.Clear();
                    
                    // –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π IEnumerator
                    il.Append(Instruction.Create(OpCodes.Call, emptyEnumeratorMethod));
                    il.Append(Instruction.Create(OpCodes.Ret));
                    
                    Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ {dialogMethod.Name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–∞—Ä–æ–ª—è");
                    patchedAny = true;
                }
                else
                {
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Ç–µ–ª–æ –º–µ—Ç–æ–¥–∞
                    var il = dialogMethod.Body.GetILProcessor();
                    
                    // –ù–∞—Ö–æ–¥–∏–º –ª—é–±–æ–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç IEnumerator
                    MethodReference anyEnumeratorMethod = FindEmptyEnumeratorMethod();
                    
                    if (anyEnumeratorMethod != null)
                    {
                        dialogMethod.Body.Instructions.Clear();
                        il.Append(Instruction.Create(OpCodes.Call, anyEnumeratorMethod));
                        il.Append(Instruction.Create(OpCodes.Ret));
                        
                        Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ {dialogMethod.Name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π IEnumerator");
                        patchedAny = true;
                    }
                }
            }
            
            return patchedAny;
        }

        /// <summary>
        /// –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ç—á–∏—Ç –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        /// </summary>
        private void SafePatchPasswordMethod(MethodDefinition method, MethodDefinition setterMethod)
        {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã–∑–æ–≤–∞ —Å–µ—Ç—Ç–µ—Ä–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–∞—Ä–æ–ª—è
            var patchedAny = false;
            var il = method.Body.GetILProcessor();
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞
            var instructions = method.Body.Instructions.ToArray();
            
            for (int i = 0; i < instructions.Length; i++)
            {
                var inst = instructions[i];
                if ((inst.OpCode == OpCodes.Call || inst.OpCode == OpCodes.Callvirt) &&
                    inst.Operand is MethodReference mr &&
                    mr.Name == setterMethod.Name)
                {
                    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Å–µ—Ç—Ç–µ—Ä–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º)
                    if (i > 0 && instructions[i-1].OpCode == OpCodes.Ldc_I4_0)
                    {
                        // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É false (0) –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É true (1)
                        int index = method.Body.Instructions.IndexOf(instructions[i-1]);
                        if (index >= 0)
                        {
                            method.Body.Instructions[index] = Instruction.Create(OpCodes.Ldc_I4_1);
                            patchedAny = true;
                        }
                    }
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞
            if (!patchedAny)
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                var firstInstruction = method.Body.Instructions[0];
                
                // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞
                il.InsertBefore(firstInstruction, Instruction.Create(OpCodes.Ldarg_0));
                il.InsertBefore(firstInstruction, Instruction.Create(OpCodes.Ldc_I4_1));
                il.InsertBefore(firstInstruction, Instruction.Create(OpCodes.Call, setterMethod));
            }
        }
        
        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∞—Å—Å –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥ HSUDFEEOGKC)
        /// </summary>
        private TypeDefinition FindPasswordDialogClass()
        {
            // 1. –ü–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            var knownClass = assembly.MainModule.GetTypes()
                .FirstOrDefault(t => t.Name == "HSUDFEEOGKC");
                
            if (knownClass != null)
                return knownClass;
                
            // 2. –ü–æ–∏—Å–∫ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –∫–ª–∞—Å—Å–∞ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è
            foreach (var type in assembly.MainModule.GetTypes())
            {
                // –ö–ª–∞—Å—Å—ã –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –º–µ—Ç–æ–¥—ã IEnumerator
                bool hasUIFields = type.Fields.Any(f => 
                    f.FieldType.FullName.Contains("Panel") || 
                    f.FieldType.FullName.Contains("Input") || 
                    f.FieldType.FullName.Contains("Button") || 
                    f.FieldType.FullName.Contains("Text"));
                    
                bool hasCoroutineMethods = type.Methods.Any(m => 
                    m.ReturnType.FullName.Contains("IEnumerator"));
                    
                bool hasBoolProperties = type.Properties.Any(p => 
                    p.PropertyType.FullName == "System.Boolean");
                    
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–æ–ª–µ–º
                bool hasPasswordStrings = false;
                foreach (var method in type.Methods)
                {
                    if (method.HasBody)
                    {
                        foreach (var inst in method.Body.Instructions)
                        {
                            if (inst.OpCode == OpCodes.Ldstr && inst.Operand is string str)
                            {
                                string lower = str.ToLowerInvariant();
                                if (lower.Contains("password") || lower.Contains("–ø–∞—Ä–æ–ª—å"))
                                {
                                    hasPasswordStrings = true;
                                    break;
                                }
                            }
                        }
                        if (hasPasswordStrings) break;
                    }
                }
                
                // –ï—Å–ª–∏ —Ç–∏–ø —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —É—Å–ª–æ–≤–∏—è–º, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –∫–ª–∞—Å—Å –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è
                if ((hasUIFields && hasCoroutineMethods && hasBoolProperties) || hasPasswordStrings)
                {
                    return type;
                }
            }
            
            return null;
        }
        
        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–π—Å—Ç–≤–æ, —Ö—Ä–∞–Ω—è—â–µ–µ —Å—Ç–∞—Ç—É—Å –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥ FOLPAEOEMAF)
        /// </summary>
        private PropertyDefinition FindPasswordProperty(TypeDefinition classType)
        {
            // 1. –ü–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            var knownProperty = classType.Properties
                .FirstOrDefault(p => p.Name == "FOLPAEOEMAF" || p.Name == "LCEMJGAJGAA");
                
            if (knownProperty != null)
                return knownProperty;
                
            // 2. –ü–æ–∏—Å–∫ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä–æ–ª—è
            List<PropertyDefinition> candidates = new List<PropertyDefinition>();
            
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –º–µ—Ç–æ–¥–∞—Ö –∫–ª–∞—Å—Å–∞
            foreach (var property in classType.Properties)
            {
                // –°–≤–æ–π—Å—Ç–≤–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä–æ–ª—è - —ç—Ç–æ –±—É–ª–µ–≤–æ —Å–≤–æ–π—Å—Ç–≤–æ —Å —Å–µ—Ç—Ç–µ—Ä–æ–º
                if (property.PropertyType.FullName == "System.Boolean" && property.SetMethod != null)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ –≤ –º–µ—Ç–æ–¥–∞—Ö –∫–ª–∞—Å—Å–∞
                    int usageCount = 0;
                    foreach (var method in classType.Methods)
                    {
                        if (method.HasBody)
                        {
                            foreach (var inst in method.Body.Instructions)
                            {
                                if ((inst.OpCode == OpCodes.Call || inst.OpCode == OpCodes.Callvirt) && 
                                    inst.Operand is MethodReference mr && 
                                    (mr.Name == property.GetMethod?.Name || mr.Name == property.SetMethod?.Name))
                                {
                                    usageCount++;
                                }
                            }
                        }
                    }
                    
                    // –ï—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
                    if (usageCount >= 2)
                    {
                        candidates.Add(property);
                    }
                }
            }
            
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
            if (candidates.Count > 0)
            {
                // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–µ—Ç–æ–¥–∞—Ö
                PropertyDefinition mostUsedProperty = candidates.First();
                int maxUsage = 0;
                
                foreach (var prop in candidates)
                {
                    int usageCount = 0;
                    foreach (var method in classType.Methods)
                    {
                        if (method.HasBody)
                        {
                            foreach (var inst in method.Body.Instructions)
                            {
                                if ((inst.OpCode == OpCodes.Call || inst.OpCode == OpCodes.Callvirt) && 
                                    inst.Operand is MethodReference mr && 
                                    (mr.Name == prop.GetMethod?.Name || mr.Name == prop.SetMethod?.Name))
                                {
                                    usageCount++;
                                }
                            }
                        }
                    }
                    
                    if (usageCount > maxUsage)
                    {
                        maxUsage = usageCount;
                        mostUsedProperty = prop;
                    }
                }
                
                return mostUsedProperty;
            }
            
            // 3. –ò—â–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–æ –æ—Å–Ω–æ–≤–∞–Ω–æ
            foreach (var property in classType.Properties)
            {
                if (property.PropertyType.FullName == "System.Boolean" && property.SetMethod != null)
                {
                    // –ò—â–µ–º –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–≤–æ–π—Å—Ç–≤–µ
                    FieldDefinition backingField = null;
                    
                    if (property.GetMethod != null && property.GetMethod.HasBody)
                    {
                        foreach (var inst in property.GetMethod.Body.Instructions)
                        {
                            if (inst.OpCode == OpCodes.Ldfld && inst.Operand is FieldReference fr)
                            {
                                backingField = classType.Fields.FirstOrDefault(f => f.Name == fr.Name);
                                break;
                            }
                        }
                    }
                    
                    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–ª–µ –∏ –µ–≥–æ –∏–º—è —Å–≤—è–∑–∞–Ω–æ —Å –ø–∞—Ä–æ–ª–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ
                    if (backingField != null)
                    {
                        string fieldName = backingField.Name.ToLowerInvariant();
                        if (fieldName.Contains("pass") || 
                            fieldName.Contains("pwd") || 
                            fieldName.Contains("secure") || 
                            fieldName.Contains("protect") || 
                            fieldName.Contains("valid"))
                        {
                            return property;
                        }
                    }
                }
            }
            
            // 4. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Å–æ–±—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –±—É–ª–µ–≤–æ —Å–≤–æ–π—Å—Ç–≤–æ —Å —Å–µ—Ç—Ç–µ—Ä–æ–º
            return classType.Properties
                .FirstOrDefault(p => p.PropertyType.FullName == "System.Boolean" && p.SetMethod != null);
        }
        
        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–µ—Ç—Ç–µ—Ä —Å–≤–æ–π—Å—Ç–≤–∞ –ø–∞—Ä–æ–ª—è
        /// </summary>
        private List<MethodDefinition> FindPasswordSetterMethods(TypeDefinition classType, MethodDefinition setMethod)
        {
            var methods = new List<MethodDefinition>();
            
            foreach (var method in classType.Methods)
            {
                if (method.HasBody)
                {
                    foreach (var inst in method.Body.Instructions)
                    {
                        if ((inst.OpCode == OpCodes.Call || inst.OpCode == OpCodes.Callvirt) && 
                            inst.Operand is MethodReference mr && mr.Name == setMethod.Name)
                        {
                            methods.Add(method);
                            break;
                        }
                    }
                }
            }
            
            return methods;
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∫–Ω–æ–ø–∫–∏ Enter –¥–ª—è –ø–∞—Ä–æ–ª—è
        /// </summary>
        private bool IsEnterButtonHandler(MethodDefinition method)
        {
            // 1. –ü–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –∏–º–µ–Ω–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            if (method.Name == "HPIGKCGMGEG")
                return true;
                
            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ Enter
            if (!method.HasBody)
                return false;
                
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–ª–∞–≤–∏—à—É Enter (KeyCode.Return = 13)
            bool hasEnterKeyCheck = false;
            foreach (var inst in method.Body.Instructions)
            {
                if ((inst.OpCode == OpCodes.Ldc_I4 || inst.OpCode == OpCodes.Ldc_I4_S) && 
                    (inst.Operand is int value && (value == 13 || value == 271)))
                {
                    hasEnterKeyCheck = true;
                    break;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º –≤–≤–æ–¥–∞ (input fields)
            bool hasInputFieldAccess = method.Body.Instructions.Any(i => 
                (i.OpCode == OpCodes.Ldfld || i.OpCode == OpCodes.Stfld) && 
                i.Operand is FieldReference fr && 
                (fr.FieldType.FullName.Contains("Input") || fr.Name.ToLowerInvariant().Contains("input")));
                
            return hasEnterKeyCheck || hasInputFieldAccess;
        }
        
        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –º–µ—Ç–æ–¥ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥ HAIGGPJCCFI)
        /// </summary>
        private MethodDefinition FindPasswordDialogMethod(TypeDefinition classType)
        {
            // 1. –ü–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            var knownMethod = classType.Methods
                .FirstOrDefault(m => m.Name == "HAIGGPJCCFI");
                
            if (knownMethod != null)
            {
                Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è –Ω–∞–π–¥–µ–Ω –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –∏–º–µ–Ω–∏: {knownMethod.Name}");
                return knownMethod;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–∏—Å–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø–∞—Ä–æ–ª–µ–º
            foreach (var method in classType.Methods)
            {
                if (method.ReturnType.FullName.Contains("IEnumerator") && method.HasBody)
                {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–æ–ª–µ–º
                    foreach (var inst in method.Body.Instructions)
                    {
                        if (inst.OpCode == OpCodes.Ldstr && inst.Operand is string str)
                        {
                            string lower = str.ToLowerInvariant();
                            if (lower.Contains("password") || 
                                lower.Contains("–ø–∞—Ä–æ–ª—å") ||
                                lower.Contains("–∑–∞—â–∏—â–µ–Ω") ||
                                lower.Contains("protected") ||
                                lower.Contains("enter") ||
                                lower.Contains("–≤–≤–æ–¥"))
                            {
                                Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è {method.Name} –Ω–∞–π–¥–µ–Ω –ø–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –ª–∏—Ç–µ—Ä–∞–ª–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø–∞—Ä–æ–ª–µ–º");
                                return method;
                            }
                        }
                    }
                }
            }
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–±–æ—Ç–µ —Å UI —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            foreach (var method in classType.Methods)
            {
                if (method.ReturnType.FullName.Contains("IEnumerator") && method.HasBody)
                {
                    bool hasUIInteraction = method.Body.Instructions.Any(i => 
                        (i.OpCode == OpCodes.Ldfld || i.OpCode == OpCodes.Stfld) && 
                        i.Operand is FieldReference fr && 
                        (fr.FieldType.FullName.Contains("Panel") || 
                         fr.FieldType.FullName.Contains("Input") || 
                         fr.FieldType.FullName.Contains("Button") || 
                         fr.FieldType.FullName.Contains("Text")));
                         
                    bool hasActiveCheck = method.Body.Instructions.Any(i => 
                        (i.OpCode == OpCodes.Call || i.OpCode == OpCodes.Callvirt) && 
                        i.Operand is MethodReference mr && 
                        (mr.Name == "SetActive" || mr.Name.Contains("Active") || mr.Name.Contains("Enable")));
                        
                    if (hasUIInteraction && hasActiveCheck)
                    {
                        Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è {method.Name} –Ω–∞–π–¥–µ–Ω –ø–æ —Ä–∞–±–æ—Ç–µ —Å UI —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏");
                        return method;
                    }
                }
            }
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–≤–æ–π—Å—Ç–≤–∞ –ø–∞—Ä–æ–ª—è
            PropertyDefinition passwordProperty = FindPasswordProperty(classType);
            if (passwordProperty != null && passwordProperty.GetMethod != null)
            {
                string getterName = passwordProperty.GetMethod.Name;
                foreach (var method in classType.Methods)
                {
                    if (method.ReturnType.FullName.Contains("IEnumerator") && method.HasBody)
                    {
                        bool usesPasswordProperty = method.Body.Instructions.Any(i => 
                            (i.OpCode == OpCodes.Call || i.OpCode == OpCodes.Callvirt) && 
                            i.Operand is MethodReference mr && 
                            mr.Name == getterName);
                            
                        if (usesPasswordProperty)
                        {
                            Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è {method.Name} –Ω–∞–π–¥–µ–Ω –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–≤–æ–π—Å—Ç–≤–∞ –ø–∞—Ä–æ–ª—è");
                            return method;
                        }
                    }
                }
            }
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü–æ–∏—Å–∫ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –æ–∂–∏–¥–∞–Ω–∏—è (WaitForSeconds)
            foreach (var method in classType.Methods)
            {
                if (method.ReturnType.FullName.Contains("IEnumerator") && method.HasBody)
                {
                    bool hasWaitForSeconds = method.Body.Instructions.Any(i => 
                        (i.OpCode == OpCodes.Call || i.OpCode == OpCodes.Callvirt || i.OpCode == OpCodes.Newobj) && 
                        i.Operand is MethodReference mr && 
                        (mr.DeclaringType.FullName.Contains("WaitForSeconds") || 
                         mr.Name.Contains("Wait") || 
                         mr.Name.Contains("Yield")));
                        
                    bool hasUIInteraction = method.Body.Instructions.Any(i => 
                        (i.OpCode == OpCodes.Ldfld || i.OpCode == OpCodes.Stfld) && 
                        i.Operand is FieldReference fr && 
                        (fr.FieldType.FullName.Contains("Panel") || 
                         fr.FieldType.FullName.Contains("Input") || 
                         fr.FieldType.FullName.Contains("Button") || 
                         fr.FieldType.FullName.Contains("Text")));
                        
                    if (hasWaitForSeconds && hasUIInteraction)
                    {
                        Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è {method.Name} –Ω–∞–π–¥–µ–Ω –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –æ–∂–∏–¥–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç–µ —Å UI");
                        return method;
                    }
                }
            }
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 5: –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É –º–µ—Ç–æ–¥–∞ (–¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—ã—á–Ω–æ –±–æ–ª—å—à–∏–µ)
            MethodDefinition largestMethod = null;
            int maxInstructions = 0;
            
            foreach (var method in classType.Methods)
            {
                if (method.ReturnType.FullName.Contains("IEnumerator") && method.HasBody)
                {
                    int instructionCount = method.Body.Instructions.Count;
                    if (instructionCount > maxInstructions)
                    {
                        maxInstructions = instructionCount;
                        largestMethod = method;
                    }
                }
            }
            
            if (largestMethod != null && maxInstructions > 30)
            {
                Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è {largestMethod.Name} –Ω–∞–π–¥–µ–Ω –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –º–µ—Ç–æ–¥-–∫–æ—Ä—É—Ç–∏–Ω–∞ ({maxInstructions} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π)");
                return largestMethod;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Å–æ–±—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ IEnumerator
            var safeMethod = classType.Methods
                .FirstOrDefault(m => m.ReturnType.FullName.Contains("IEnumerator") && m.HasBody);
                      
            if (safeMethod != null)
            {
                Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è {safeMethod.Name} –Ω–∞–π–¥–µ–Ω –∫–∞–∫ –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ IEnumerator");
                return safeMethod;
            }
            
            return null;
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤—è–∑–∞–Ω –ª–∏ –º–µ—Ç–æ–¥ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–∞—Ä—Ç
        /// </summary>
        private bool IsMapLoadingRelatedMethod(MethodDefinition method)
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –º–µ—Ç–æ–¥–∞
            string name = method.Name.ToLowerInvariant();
            if (name.Contains("load") || 
                name.Contains("scene") || 
                name.Contains("map") || 
                name.Contains("terrain") || 
                name.Contains("world") || 
                name.Contains("progress") || 
                name.Contains("init") || 
                name.Contains("start") || 
                name == "reset" || 
                name == "ldjiambffdo" || 
                name == "cihnhhdglmi" || 
                name == "nhbkjmndjgo")
            {
                return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–∫–ª–∞—Ä–∏—Ä—É—é—â–µ–≥–æ —Ç–∏–ø–∞
            string typeName = method.DeclaringType.Name.ToLowerInvariant();
            if (typeName.Contains("loader") || 
                typeName.Contains("scene") || 
                typeName.Contains("map") || 
                typeName.Contains("terrain") || 
                typeName.Contains("world") || 
                typeName.Contains("progress"))
            {
                return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            if (!method.HasBody)
                return false;
                
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
            foreach (var inst in method.Body.Instructions)
            {
                if (inst.OpCode == OpCodes.Ldstr && inst.Operand is string str)
                {
                    string lower = str.ToLowerInvariant();
                    if (lower.Contains("map") || 
                        lower.Contains("scene") || 
                        lower.Contains("terrain") || 
                        lower.Contains("world") || 
                        lower.Contains("load") || 
                        lower.Contains(".map") || 
                        lower.Contains(".save") || 
                        lower.Contains("prefab") || 
                        lower.Contains("asset"))
                    {
                        return true;
                    }
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
            int loadRelatedCalls = 0;
            foreach (var inst in method.Body.Instructions)
            {
                if ((inst.OpCode == OpCodes.Call || inst.OpCode == OpCodes.Callvirt) && 
                    inst.Operand is MethodReference mr)
                {
                    string methodName = mr.Name.ToLowerInvariant();
                    string declaringType = mr.DeclaringType?.FullName?.ToLowerInvariant() ?? "";
                    
                    if (declaringType.Contains("scenemanagement") || 
                        declaringType.Contains("loadscene") || 
                        declaringType.Contains("unityengine.scene") || 
                        methodName.Contains("loadscene") || 
                        methodName.Contains("loadasync") || 
                        methodName.Contains("instantiate"))
                    {
                        loadRelatedCalls++;
                    }
                }
            }
            
            return loadRelatedCalls >= 2;
        }
        
        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –ø—É—Å—Ç–æ–π IEnumerator
        /// </summary>
        private MethodReference FindEmptyEnumeratorMethod()
        {
            // 1. –ü–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –∫–ª–∞—Å—Å—É IKPGLDIBCMB
            TypeDefinition ikpgldibcmbType = assembly.MainModule.GetTypes()
                .FirstOrDefault(t => t.Name == "IKPGLDIBCMB");
                
            if (ikpgldibcmbType != null)
            {
                var emptyEnumeratorMethod = ikpgldibcmbType.Methods
                    .FirstOrDefault(m => m.ReturnType.FullName.Contains("IEnumerator"));
                    
                if (emptyEnumeratorMethod != null)
                    return emptyEnumeratorMethod;
            }
            
            // 2. –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ –º–µ—Ç–æ–¥–∞ IEnumerator –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            foreach (var type in assembly.MainModule.Types)
            {
                foreach (var method in type.Methods)
                {
                    if (method.ReturnType.FullName.Contains("IEnumerator") && 
                        method.Parameters.Count == 0 && 
                        method.HasBody)
                    {
                        return method;
                    }
                }
            }
            
            return null;
        }
    }
} 
using System;
using System.Linq;
using Mono.Cecil;
using Mono.Cecil.Cil;

namespace RustEditProCrack.Unlockers
{
    /// <summary>
    /// –ö–ª–∞—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º –≤ RustEdit Pro
    /// </summary>
    public class PasswordProtectionRemover
    {
        private readonly AssemblyDefinition assembly;

        public PasswordProtectionRemover(AssemblyDefinition assembly)
        {
            this.assembly = assembly;
        }

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º
        /// </summary>
        public bool RemovePasswordProtection()
        {
            Console.WriteLine("üîß === –£–î–ê–õ–ï–ù–ò–ï PASSWORD PROTECTION ===");
            Console.WriteLine("üéØ –ò—â–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É WorldSaveLoad.LoadWorld –∏ —É–¥–∞–ª—è–µ–º yield return base.StartCoroutine({text1}.{text2}(data))");
            
            try
            {
                // –ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å WorldSaveLoad
                var worldSaveLoadClass = assembly.MainModule.Types
                    .FirstOrDefault(t => t.Name.Contains("WorldSaveLoad"));
                    
                if (worldSaveLoadClass == null)
                {
                    Console.WriteLine("‚ùå WorldSaveLoad –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                    return false;
                }

                Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å: {worldSaveLoadClass.Name}");

                // –ù–∞–π—Ç–∏ –ö–û–†–£–¢–ò–ù–£ LoadWorld (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç IEnumerator)
                var loadWorldCoroutine = worldSaveLoadClass.Methods
                    .FirstOrDefault(m => m.Name == "LoadWorld" && 
                                       m.ReturnType.FullName.Contains("IEnumerator"));

                if (loadWorldCoroutine == null)
                {
                    Console.WriteLine("‚ùå –ö–æ—Ä—É—Ç–∏–Ω–∞ LoadWorld –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                    return false;
                }

                Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ—Ä—É—Ç–∏–Ω–∞ LoadWorld: {loadWorldCoroutine.Name}");
                Console.WriteLine($"   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {loadWorldCoroutine.ReturnType.FullName}");

                // –ü–æ–ª—É—á–∏—Ç—å –∏–º—è state machine –∏–∑ –∫–æ—Ä—É—Ç–∏–Ω—ã
                var stateMachineName = GetStateMachineName(loadWorldCoroutine);
                if (stateMachineName == null)
                {
                    Console.WriteLine("‚ùå State machine –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä—É—Ç–∏–Ω–µ LoadWorld");
                    return false;
                }

                Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω state machine: {stateMachineName}");

                // –ù–∞–π—Ç–∏ state machine –∫–ª–∞—Å—Å
                var stateMachineClass = worldSaveLoadClass.NestedTypes
                    .FirstOrDefault(t => t.Name == stateMachineName);

                if (stateMachineClass == null)
                {
                    Console.WriteLine($"‚ùå State machine –∫–ª–∞—Å—Å {stateMachineName} –Ω–µ –Ω–∞–π–¥–µ–Ω");
                    return false;
                }

                // –ù–∞–π—Ç–∏ MoveNext –º–µ—Ç–æ–¥ –≤ state machine
                var moveNextMethod = stateMachineClass.Methods
                    .FirstOrDefault(m => m.Name == "MoveNext");

                if (moveNextMethod?.HasBody != true)
                {
                    Console.WriteLine("‚ùå MoveNext –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state machine");
                    return false;
                }

                Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω MoveNext –º–µ—Ç–æ–¥ —Å {moveNextMethod.Body.Instructions.Count} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏");

                // –£–¥–∞–ª–∏—Ç—å password protection –∏–∑ MoveNext
                return RemovePasswordFromMoveNext(moveNextMethod);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è password protection: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –∏–º—è state machine –∫–ª–∞—Å—Å–∞ –∏–∑ –∫–æ—Ä—É—Ç–∏–Ω—ã
        /// </summary>
        private string? GetStateMachineName(MethodDefinition coroutine)
        {
            foreach (var inst in coroutine.Body.Instructions)
            {
                if (inst.OpCode == OpCodes.Newobj &&
                    inst.Operand?.ToString().Contains("WorldSaveLoad/") == true)
                {
                    var operandStr = inst.Operand.ToString();
                    var parts = operandStr.Split('/');
                    if (parts.Length > 1)
                    {
                        var className = parts[1].Split(':')[0];
                        return className;
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// –£–¥–∞–ª–∏—Ç—å password protection –∏–∑ MoveNext –º–µ—Ç–æ–¥–∞ state machine
        /// </summary>
        private bool RemovePasswordFromMoveNext(MethodDefinition moveNext)
        {
            Console.WriteLine("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º MoveNext –¥–ª—è –ø–æ–∏—Å–∫–∞ password protection...");
            
            var instructions = moveNext.Body.Instructions;
            var ilProcessor = moveNext.Body.GetILProcessor();

            // –ü–æ–∫–∞–∑–∞—Ç—å IL –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            Console.WriteLine("üìã IL –∫–æ–¥ MoveNext:");
            for (int i = 0; i < Math.Min(instructions.Count, 50); i++)
            {
                var inst = instructions[i];
                Console.WriteLine($"  {i:D3}: {inst.OpCode,-15} {inst.Operand}");
            }

            // –≠–¢–ê–ü 1: –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É string.Empty
            int stringEmptyIndex = FindStringEmpty(instructions);
            if (stringEmptyIndex == -1)
            {
                Console.WriteLine("‚ùå string.Empty –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é");
                return false;
            }

            Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω string.Empty –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {stringEmptyIndex}");

            // –≠–¢–ê–ü 2: –ò—Å–∫–∞—Ç—å –ü–û–°–õ–ï string.Empty –ø–∞—Ç—Ç–µ—Ä–Ω: StartCoroutine + –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å data –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
            int passwordBlockStart = FindPasswordProtectionAfterStringEmpty(instructions, stringEmptyIndex);
            if (passwordBlockStart == -1)
            {
                Console.WriteLine("‚ùå Password protection –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –ü–û–°–õ–ï string.Empty");
                return false;
            }

            Console.WriteLine($"üéØ –ù–ê–ô–î–ï–ù PASSWORD PROTECTION –ë–õ–û–ö –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–∏—Ü–∏–∏ {passwordBlockStart}");

            // –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–î–•–û–î: –ó–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
            // –ù–ï –¢–†–û–ì–ê–ï–ú –≤–µ—Å—å –±–ª–æ–∫ - —Ç–æ–ª—å–∫–æ —Å–∞–º—É –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!
            var obfuscatedCallInst = instructions[passwordBlockStart];
            Console.WriteLine($"üîß –ê–ö–ö–£–†–ê–¢–ù–ê–Ø –ó–ê–ú–ï–ù–ê –¢–û–õ–¨–ö–û –û–ë–§–£–°–¶–ò–†–û–í–ê–ù–ù–û–ì–û –í–´–ó–û–í–ê:");
            Console.WriteLine($"  –î–û:  {passwordBlockStart:D3}: {obfuscatedCallInst.OpCode,-15} {obfuscatedCallInst.Operand}");
            
            // –ó–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –≤—ã–∑–æ–≤ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–∞ ldnull
            // –≠—Ç–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç yield return base.StartCoroutine(OBFUSCATED(data)) –≤ yield return base.StartCoroutine(null)
            // –ß—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –Ω–µ –ª–æ–º–∞–µ—Ç state machine
            ilProcessor.Replace(instructions[passwordBlockStart], Instruction.Create(OpCodes.Ldnull));
            
            Console.WriteLine($"  –ü–û–°–õ–ï: {passwordBlockStart:D3}: ldnull");
            Console.WriteLine("‚úÖ PASSWORD PROTECTION –ú–ï–¢–û–î –ó–ê–ú–ï–ù–ï–ù –ù–ê NULL!");
            Console.WriteLine("   –†–µ–∑—É–ª—å—Ç–∞—Ç: yield return base.StartCoroutine(null) // –±–µ–∑–æ–ø–∞—Å–Ω–æ, state machine –Ω–µ –ø–æ–ª–æ–º–∞–Ω");
            
            return true;
        }

        /// <summary>
        /// –ù–∞–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é string.Empty
        /// </summary>
        private int FindStringEmpty(System.Collections.Generic.IList<Instruction> instructions)
        {
            for (int i = 0; i < instructions.Count; i++)
            {
                var inst = instructions[i];
                
                // –ò—â–µ–º ldsfld string.Empty
                if (inst.OpCode == OpCodes.Ldsfld &&
                    inst.Operand?.ToString().Contains("String::Empty") == true)
                {
                    return i;
                }
            }
            return -1;
        }

        /// <summary>
        /// –ù–∞–π—Ç–∏ password protection –ü–û–°–õ–ï string.Empty
        /// </summary>
        private int FindPasswordProtectionAfterStringEmpty(System.Collections.Generic.IList<Instruction> instructions, int stringEmptyIndex)
        {
            Console.WriteLine($"üîç –ò—â–µ–º password protection –ü–û–°–õ–ï –ø–æ–∑–∏—Ü–∏–∏ {stringEmptyIndex}...");
            
            // –ò—Å–∫–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 50 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –ø–æ—Å–ª–µ string.Empty
            for (int i = stringEmptyIndex + 1; i < Math.Min(instructions.Count - 5, stringEmptyIndex + 50); i++)
            {
                var inst = instructions[i];
                
                // –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è call —Å –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
                if (inst.OpCode == OpCodes.Call &&
                    inst.Operand is MethodReference methodRef &&
                    IsObfuscatedName(methodRef.DeclaringType.Name) &&
                    IsObfuscatedName(methodRef.Name) &&
                    HasDataParameter(methodRef))
                {
                    Console.WriteLine($"üéØ –ù–ê–ô–î–ï–ù –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å data –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}: {methodRef.DeclaringType.Name}.{methodRef.Name}");
                    
                    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ü–û–°–õ–ï –Ω–µ–≥–æ –µ—Å—Ç—å StartCoroutine
                    var startCoroutineIndex = FindStartCoroutineAfter(instructions, i);
                    if (startCoroutineIndex != -1)
                    {
                        Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω StartCoroutine –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {startCoroutineIndex} - —ç—Ç–æ password protection!");
                        return i; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ (–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
                    }
                }
            }
            return -1;
        }

        /// <summary>
        /// –ù–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π –±–ª–æ–∫ yield return –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        /// </summary>
        private (int start, int end) FindYieldReturnBlockFromStart(System.Collections.Generic.IList<Instruction> instructions, int startPos)
        {
            Console.WriteLine($"üîç –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±–ª–æ–∫–∞ yield return –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–∏—Ü–∏–∏ {startPos}...");
            
            // –ù–∞—á–∞–ª–æ: –Ω–∞–π—Ç–∏ ldarg.0 –∏–ª–∏ ldloc –ø–µ—Ä–µ–¥ startPos
            int blockStart = startPos;
            for (int i = startPos - 1; i >= Math.Max(0, startPos - 5); i--)
            {
                var inst = instructions[i];
                if (inst.OpCode == OpCodes.Ldarg_0 || 
                    inst.OpCode.ToString().StartsWith("Ldloc"))
                {
                    blockStart = i;
                    break;
                }
            }

            // –ù–∞–π—Ç–∏ StartCoroutine –ø–æ—Å–ª–µ startPos
            int startCoroutineIndex = FindStartCoroutineAfter(instructions, startPos);
            if (startCoroutineIndex == -1)
            {
                return (-1, -1);
            }

            // –ö–æ–Ω–µ—Ü: –Ω–∞–π—Ç–∏ stfld state –ø–æ—Å–ª–µ StartCoroutine
            int blockEnd = startCoroutineIndex;
            for (int i = startCoroutineIndex + 1; i < Math.Min(instructions.Count, startCoroutineIndex + 15); i++)
            {
                var inst = instructions[i];
                
                // –ò—â–µ–º stfld –¥–ª—è current
                if (inst.OpCode == OpCodes.Stfld && 
                    inst.Operand?.ToString().Contains("current") == true)
                {
                    blockEnd = i;
                    continue;
                }
                
                // –ò—â–µ–º stfld –¥–ª—è state (–æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –±–ª–æ–∫–µ)
                if (inst.OpCode == OpCodes.Stfld && 
                    inst.Operand?.ToString().Contains("state") == true)
                {
                    blockEnd = i;
                    continue;
                }
                
                // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ ldc.i4.1 –∏ ret - —ç—Ç–æ –∫–æ–Ω–µ—Ü yield return –±–ª–æ–∫–∞
                if (inst.OpCode == OpCodes.Ldc_I4_1 && 
                    i + 1 < instructions.Count && 
                    instructions[i + 1].OpCode == OpCodes.Ret)
                {
                    blockEnd = i + 1;
                    break;
                }
            }
            
            Console.WriteLine($"üìç –ë–ª–æ–∫ yield return: {blockStart} - {blockEnd}");
            return (blockStart, blockEnd);
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–µ–µ—Ç –ª–∏ –º–µ—Ç–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä data —Ç–∏–ø–∞
        /// </summary>
        private bool HasDataParameter(MethodReference methodRef)
        {
            if (methodRef.Parameters.Count == 0) return false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä —Å —Ç–∏–ø–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è (–æ–±—ã—á–Ω–æ —ç—Ç–æ data)
            foreach (var param in methodRef.Parameters)
            {
                var paramType = param.ParameterType.FullName;
                if (paramType.Contains("PLOFBHPMKFD") || // –û–±—ã—á–Ω—ã–π —Ç–∏–ø data –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
                    paramType.Contains("/") || // Nested type
                    IsObfuscatedName(param.ParameterType.Name))
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// –ù–∞–π—Ç–∏ StartCoroutine –ü–û–°–õ–ï —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        /// </summary>
        private int FindStartCoroutineAfter(System.Collections.Generic.IList<Instruction> instructions, int startPos)
        {
            // –ò—Å–∫–∞—Ç—å –≤ 10 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –≤–ø–µ—Ä–µ–¥
            for (int i = startPos + 1; i < Math.Min(instructions.Count, startPos + 10); i++)
            {
                var inst = instructions[i];
                if (inst.OpCode == OpCodes.Call &&
                    inst.Operand?.ToString().Contains("StartCoroutine") == true)
                {
                    return i;
                }
            }
            return -1;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        /// </summary>
        private string GetObfuscatedMethodName(Instruction obfuscatedCall)
        {
            if (obfuscatedCall.Operand is MethodReference methodRef)
            {
                return $"{methodRef.DeclaringType.Name}.{methodRef.Name}";
            }
            return "OBFUSCATED.METHOD";
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        /// </summary>
        private bool IsObfuscatedName(string name)
        {
            return name.Length >= 8 && name.Length <= 15 &&
                   name.All(c => char.IsUpper(c) || char.IsDigit(c)) &&
                   name.Any(char.IsLetter);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —Å—Ç–µ–∫
        /// </summary>
        private int GetStackEffect(Instruction instruction)
        {
            switch (instruction.OpCode.Code)
            {
                case Mono.Cecil.Cil.Code.Ldarg_0:
                case Mono.Cecil.Cil.Code.Ldloc:
                case Mono.Cecil.Cil.Code.Ldloc_0:
                case Mono.Cecil.Cil.Code.Ldloc_1:
                case Mono.Cecil.Cil.Code.Ldloc_2:
                case Mono.Cecil.Cil.Code.Ldloc_3:
                case Mono.Cecil.Cil.Code.Ldloc_S:
                case Mono.Cecil.Cil.Code.Ldc_I4:
                case Mono.Cecil.Cil.Code.Ldc_I4_0:
                case Mono.Cecil.Cil.Code.Ldc_I4_1:
                case Mono.Cecil.Cil.Code.Ldc_I4_6:
                case Mono.Cecil.Cil.Code.Ldnull:
                    return +1; // –î–æ–±–∞–≤–ª—è–µ—Ç 1 —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç–µ–∫
                
                case Mono.Cecil.Cil.Code.Stfld:
                case Mono.Cecil.Cil.Code.Stloc:
                case Mono.Cecil.Cil.Code.Stloc_S:
                case Mono.Cecil.Cil.Code.Pop:
                    return -1; // –£–±–∏—Ä–∞–µ—Ç 1 —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç–µ–∫–∞
                
                case Mono.Cecil.Cil.Code.Ldfld:
                    return 0;  // –ó–∞–º–µ–Ω—è–µ—Ç 1 –Ω–∞ 1
                    
                case Mono.Cecil.Cil.Code.Call:
                    // –î–ª—è call –Ω—É–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    if (instruction.Operand is MethodReference methodRef)
                    {
                        int paramCount = methodRef.Parameters.Count;
                        if (!methodRef.HasThis) paramCount++; // –î–æ–±–∞–≤–ª—è–µ–º this –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–π
                        int returnCount = methodRef.ReturnType.FullName == "System.Void" ? 0 : 1;
                        return returnCount - paramCount;
                    }
                    return 0;
                    
                case Mono.Cecil.Cil.Code.Ret:
                case Mono.Cecil.Cil.Code.Nop:
                    return 0; // –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–µ–∫
                    
                default:
                    return 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤–ª–∏—è–µ—Ç
            }
        }
    }
} 
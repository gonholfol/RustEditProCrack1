using Mono.Cecil;
using System;
using System.IO;
using RustEditProCrack.Unlockers;

namespace RustEditProCrack.Core
{
    /// <summary>
    /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–æ–≤
    /// </summary>
    public class DllManager : IDisposable
    {
        private AssemblyDefinition assembly;
        private string assemblyPath;
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∏
        private ProModeUnlocker proModeUnlocker;
        private SmartPrefabUnlocker smartPrefabUnlocker;
        private PasswordProtectionRemover passwordRemover;

        public bool LoadAssembly(string path)
        {
            try
            {
                assemblyPath = path;
                
                // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä –¥–ª—è Unity –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                var resolver = new DefaultAssemblyResolver();
                var managedPath = Path.GetDirectoryName(path);
                if (!string.IsNullOrEmpty(managedPath))
                {
                    resolver.AddSearchDirectory(managedPath);
                }
                
                var readerParameters = new ReaderParameters()
                {
                    AssemblyResolver = resolver,
                    ReadingMode = ReadingMode.Immediate
                };
                
                assembly = AssemblyDefinition.ReadAssembly(path, readerParameters);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–æ–≤
                proModeUnlocker = new ProModeUnlocker(assembly);
                smartPrefabUnlocker = new SmartPrefabUnlocker(assembly);
                passwordRemover = new PasswordProtectionRemover(assembly);
                
                Console.WriteLine($"‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {path}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–±–æ—Ä–∫–∏: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ç—á–∏ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–±–æ—Ä–∫–µ
        /// </summary>
        public bool ApplyAllPatches()
        {
            Console.WriteLine("üîß –ü—Ä–∏–º–µ–Ω—è—é –ø–∞—Ç—á–∏...");
            
            try
            {
                // STEP 1: Pro Mode Unlock
                Console.WriteLine("\nüîß STEP 1: PRO MODE UNLOCK");
                var proUnlocker = new ProModeUnlocker(assembly);
                bool proResult = proUnlocker.UnlockProMode();
                
                // STEP 2: Prefab Unlock (–£–ú–ù–´–ô –ü–ê–¢–ß–ï–†)
                Console.WriteLine("\nüîß STEP 2: PREFAB UNLOCK (–£–ú–ù–´–ô)");
                var smartPrefabUnlocker = new SmartPrefabUnlocker(assembly);
                bool prefabResult = smartPrefabUnlocker.UnlockPrefabsSmartly();
                
                // STEP 3: Password Protection Removal
                Console.WriteLine("\nüîß STEP 3: PASSWORD PROTECTION REMOVAL");
                var passwordRemover = new PasswordProtectionRemover(assembly);
                bool passwordResult = passwordRemover.RemovePasswordProtection();
                
                // –†–µ–∑—É–ª—å—Ç–∞—Ç
                if (proResult && prefabResult && passwordResult)
                {
                    Console.WriteLine("\nüéâ –í–°–ï –ü–ê–¢–ß–ò –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!");
                    return true;
                }
                else
                {
                    Console.WriteLine("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ü–ê–¢–ß–ò –ù–ï –ü–†–ò–ú–ï–ù–ò–õ–ò–°–¨");
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ç—á–µ–π: {ex.Message}");
                Console.WriteLine($"   StackTrace: {ex.StackTrace}");
                return false;
            }
        }

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏
        /// </summary>
        public bool SavePatched()
        {
            if (assembly == null)
            {
                Console.WriteLine("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                return false;
            }

            try
            {
                var directory = Path.GetDirectoryName(assemblyPath);
                var filename = Path.GetFileNameWithoutExtension(assemblyPath);
                var extension = Path.GetExtension(assemblyPath);
                var outputPath = Path.Combine(directory, $"{filename}_Cracked{extension}");

                // –°–æ–∑–¥–∞–µ–º WriterParameters –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Unity —Å–±–æ—Ä–æ–∫
                var writerParameters = new WriterParameters()
                {
                    WriteSymbols = false // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
                };

                assembly.Write(outputPath, writerParameters);
                
                var fileInfo = new FileInfo(outputPath);
                Console.WriteLine($"‚úÖ –ü—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:");
                Console.WriteLine($"   –ü—É—Ç—å: {outputPath}");
                Console.WriteLine($"   –†–∞–∑–º–µ—Ä: {fileInfo.Length / (1024.0 * 1024.0):F2} MB");
                
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {ex.Message}");
                Console.WriteLine("üí° –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...");
                
                try
                {
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –±–µ–∑ WriterParameters
                    var directory = Path.GetDirectoryName(assemblyPath);
                    var filename = Path.GetFileNameWithoutExtension(assemblyPath);
                    var extension = Path.GetExtension(assemblyPath);
                    var outputPath = Path.Combine(directory, $"{filename}_Cracked{extension}");
                    
                    using (var stream = new FileStream(outputPath, FileMode.Create))
                    {
                        assembly.Write(stream);
                    }
                    
                    var fileInfo = new FileInfo(outputPath);
                    Console.WriteLine($"‚úÖ –ü—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±):");
                    Console.WriteLine($"   –ü—É—Ç—å: {outputPath}");
                    Console.WriteLine($"   –†–∞–∑–º–µ—Ä: {fileInfo.Length / (1024.0 * 1024.0):F2} MB");
                    
                    return true;
                }
                catch (Exception ex2)
                {
                    Console.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {ex2.Message}");
                    return false;
                }
            }
        }

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
        /// </summary>
        public bool SavePatched(string outputPath)
        {
            if (assembly == null)
            {
                Console.WriteLine("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                return false;
            }

            try
            {
                // –°–æ–∑–¥–∞–µ–º WriterParameters –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Unity —Å–±–æ—Ä–æ–∫
                var writerParameters = new WriterParameters()
                {
                    WriteSymbols = false // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
                };

                assembly.Write(outputPath, writerParameters);
                
                var fileInfo = new FileInfo(outputPath);
                Console.WriteLine($"‚úÖ –ü—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:");
                Console.WriteLine($"   –ü—É—Ç—å: {outputPath}");
                Console.WriteLine($"   –†–∞–∑–º–µ—Ä: {fileInfo.Length / (1024.0 * 1024.0):F2} MB");
                
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {ex.Message}");
                Console.WriteLine("üí° –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...");
                
                try
                {
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –±–µ–∑ WriterParameters
                    using (var stream = new FileStream(outputPath, FileMode.Create))
                    {
                        assembly.Write(stream);
                    }
                    
                    var fileInfo = new FileInfo(outputPath);
                    Console.WriteLine($"‚úÖ –ü—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±):");
                    Console.WriteLine($"   –ü—É—Ç—å: {outputPath}");
                    Console.WriteLine($"   –†–∞–∑–º–µ—Ä: {fileInfo.Length / (1024.0 * 1024.0):F2} MB");
                    
                    return true;
                }
                catch (Exception ex2)
                {
                    Console.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {ex2.Message}");
                    return false;
                }
            }
        }

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        /// </summary>
        public void Dispose()
        {
            assembly?.Dispose();
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é —Å–±–æ—Ä–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        /// </summary>
        public AssemblyDefinition GetAssembly()
        {
            return assembly;
        }
    }
} 